I"P<p>El patrón <strong>Interpreter</strong> nos proporciona la utilidad de transformar, la gramática del lenguaje, de tal forma que podamos evaluar, codificando estas expresiones del lenguaje natural, en objetos.</p>

<p>En resumidas, nos da la facilidad de transformar el lenguaje que hablamos y con el que nos comunicamos, en lenguaje máquina.</p>

<p>Y no, esto no es Inteligencia Artificial.</p>

<p>Vamos con el ejemplo.</p>

<p>En nuestro catálogo de libros nos gustaría implementar un buscador que, a partir de expresiones regulares, nos devuelva unos y/u otros resultados.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Expression</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="kt">bool</span> <span class="nf">Validate</span><span class="p">(</span><span class="kt">string</span> <span class="n">descripcion</span><span class="p">);</span>

    <span class="k">protected</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">origen</span><span class="p">;</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">position</span><span class="p">;</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">libro</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NextBook</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">position</span> <span class="p">&lt;</span> <span class="n">origen</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">origen</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="p">==</span>  <span class="sc">' '</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">position</span><span class="p">++;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">indice</span> <span class="p">==</span> <span class="n">origen</span><span class="p">.</span><span class="n">Length</span><span class="p">){</span>
                <span class="n">libro</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="n">origen</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="p">==</span> <span class="sc">'('</span><span class="p">)</span> <span class="p">||</span> <span class="p">(</span><span class="n">origen</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="p">==</span> <span class="sc">')'</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">libro</span> <span class="p">=</span> <span class="n">origen</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">position</span><span class="p">,</span><span class="m">1</span><span class="p">);</span>
                <span class="n">position</span><span class="p">++;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">initPosition</span> <span class="p">=</span> <span class="n">position</span><span class="p">;</span>
                 <span class="k">while</span> <span class="p">((</span><span class="n">position</span> <span class="p">&lt;</span> <span class="n">origen</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">origen</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="p">!=</span>  <span class="sc">' '</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">origen</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="p">!=</span> <span class="sc">')'</span><span class="p">)</span> <span class="p">{</span>
                     <span class="n">position</span><span class="p">++;</span>
                     <span class="n">libro</span> <span class="p">=</span> <span class="n">origen</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">initPosition</span><span class="p">,</span> <span class="n">position</span> <span class="p">-</span><span class="n">initPosition</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">Expression</span> <span class="nf">Analize</span><span class="p">(</span><span class="n">strin</span> <span class="n">origen</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Expresion</span><span class="p">.</span><span class="n">origen</span> <span class="p">=</span> <span class="n">origen</span><span class="p">;</span>
        <span class="n">position</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="nf">NextBook</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">OperatorX</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">Expresion</span> <span class="nf">Parse</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Expresion</span> <span class="n">result</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">libro</span> <span class="p">==</span> <span class="s">"("</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">NextBook</span><span class="p">();</span>
            <span class="n">result</span> <span class="p">=</span> <span class="n">OperatorX</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">libro</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Error de sintaxis"</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">libro</span> <span class="p">!=</span> <span class="s">")"</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Error de sintaxis"</span><span class="p">);</span>
            <span class="nf">NextBook</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">result</span> <span class="p">=</span> <span class="n">PalabraClave</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Word</span> <span class="p">:</span> <span class="n">Expresion</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="n">_word</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">Word</span><span class="p">(</span><span class="kt">string</span> <span class="n">word</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_word</span> <span class="p">=</span> <span class="n">word</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Eval</span><span class="p">(</span><span class="kt">string</span> <span class="n">descripcion</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">descripcion</span><span class="p">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="n">_word</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">new</span> <span class="n">Expresion</span> <span class="nf">Parse</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Expresion</span> <span class="n">result</span><span class="p">;</span>
        <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Word</span><span class="p">(</span><span class="n">pieza</span><span class="p">);</span>
        <span class="nf">NextBook</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BinaryOperator</span> <span class="p">:</span> <span class="n">Expresion</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="n">Expresion</span> <span class="n">_leftOperator</span><span class="p">,</span> <span class="n">_rightOperator</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">BinaryOperator</span><span class="p">(</span><span class="n">Expresion</span> <span class="n">leftOperator</span><span class="p">,</span> <span class="n">Expresion</span> <span class="n">rightOperator</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_leftOperator</span> <span class="p">=</span> <span class="n">leftOperator</span><span class="p">;</span>
        <span class="n">_rightOperator</span> <span class="p">=</span> <span class="n">rightOperator</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">OperatorX</span> <span class="p">:</span> <span class="n">BinaryOperator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">OperatorX</span><span class="p">(</span><span class="n">Expresion</span> <span class="n">leftOperator</span><span class="p">,</span> <span class="n">Expresion</span> <span class="n">rightOperator</span><span class="p">)</span>
           <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">leftOperator</span><span class="p">,</span> <span class="n">rightOperator</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">evalua</span><span class="p">(</span><span class="kt">string</span> <span class="n">descripcion</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">leftOperator</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="n">descripcion</span><span class="p">)</span> <span class="p">||</span> <span class="n">rightOperator</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="n">descripcion</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">new</span> <span class="n">Expresion</span> <span class="nf">Parse</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Expresion</span> <span class="n">leftResult</span><span class="p">,</span> <span class="n">RightResult</span><span class="p">;</span>
        <span class="n">leftResult</span> <span class="p">=</span> <span class="n">OperatorY</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">libro</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">libro</span> <span class="p">==</span> <span class="s">"o"</span><span class="p">))</span> <span class="p">{</span>
           <span class="nf">NextBook</span><span class="p">();</span>
           <span class="n">RightResult</span> <span class="p">=</span> <span class="n">OperatorY</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
           <span class="n">leftResult</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OperatorX</span><span class="p">(</span><span class="n">leftResult</span><span class="p">,</span> <span class="n">RightResult</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">leftResult</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">OperatorY</span> <span class="p">:</span> <span class="n">BinaryOperator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">OperatorY</span><span class="p">(</span><span class="n">Expresion</span> <span class="n">leftOperator</span><span class="p">,</span> <span class="n">Expresion</span> <span class="n">rightOperator</span><span class="p">)</span>
           <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">leftOperator</span><span class="p">,</span> <span class="n">rightOperator</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Eval</span><span class="p">(</span><span class="kt">string</span> <span class="n">descripcion</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">leftOperator</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="n">descripcion</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">rightOperator</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="n">descripcion</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">new</span> <span class="n">Expresion</span> <span class="nf">Parse</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Expresion</span> <span class="n">leftResult</span><span class="p">,</span> <span class="n">RightResult</span><span class="p">;</span>
        <span class="n">leftResult</span> <span class="p">=</span> <span class="n">Expresion</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">pieza</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">pieza</span> <span class="p">==</span> <span class="s">"y"</span><span class="p">))</span> <span class="p">{</span>
           <span class="nf">NextBook</span><span class="p">();</span>
           <span class="n">RightResult</span> <span class="p">=</span> <span class="n">Expresion</span><span class="p">.</span><span class="nf">Parse</span><span class="p">();</span>
           <span class="n">leftResult</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OperatorY</span><span class="p">(</span><span class="n">leftResult</span><span class="p">,</span> <span class="n">RightResult</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">leftResult</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Expresion</span> <span class="n">expresionConsulta</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"Introduzca su consulta: "</span><span class="p">);</span>
        <span class="kt">string</span> <span class="n">consulta</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="n">expresionConsulta</span> <span class="p">=</span> <span class="n">Expresion</span><span class="p">.</span><span class="nf">Analize</span><span class="p">(</span><span class="n">consulta</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="n">expresionConsulta</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">expresionConsulta</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Introduzca la descripción de un libro: "</span><span class="p">);</span>
            <span class="kt">string</span> <span class="n">descripcion</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">expresionConsulta</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="n">descripcion</span><span class="p">))</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"La descripción responde a la consulta"</span><span class="p">);</span>
            <span class="k">else</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"La descripción no responde a la consulta"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Y la salida que obtendríamos sería:</p>

<p>Introduzca su consulta: (it o historia) y actualizado y Pdf</p>

<p>Introduzca la descripción de un libro:</p>

<p>Este libro de it que es un Pdf esta actualizado</p>

<p>La descripción responde a la consulta</p>

<p>Saludos.</p>
:ET