I"F<p>Hola de nuevo. Lo primero, presta mucha atención a este patrón si estáis trabajando con microservicios o con Arquitecturas DDD (Domain Driven Design).</p>

<p>Anti-Corruption Layer nos recomienda crear una capa de aislamiento que permita a los clientes trabajar con sus modelos de negocio y desacoplar estos modelos en nuestra lógica de negocio. Los sistemas se comunican entre ellos mediante los contratos establecidos (interfaces), y anti-corruption layer lo que nos proporciona es una mínima o nula modificación en las aplicaciones conectadas entre los sistemas. Internamente, la capa se traduce en ambas direcciones según sea necesario entre los dos modelos.</p>

<p>Eric Evans, fue el que acuñó este concepto en su libro sobre <a href="https://dddcommunity.org/book/evans_2003/" title="Domain Driven Design">DDD</a>.</p>

<p>Así no reinventaremos la rueda y usaremos el ejemplo que usaba en su libro:</p>

<p>Imaginemos que una aplicación depende de Google Calendar para programar y recordar eventos. Para sincronizar los datos desde y hacia Google Calendar, necesitaremos asignar los datos entre los dos sistemas, es decir, nuestra aplicación y Google Calendar. Esto se debe a que los modelos de datos y la estructura serán diferentes en estos sistemas. Con el patrón anti-corruption layer, lo que haremos es usar un proxy/middleware que traducza los contratos entre Google Calendar y los contratos que usemos en nuestra aplicaciones.</p>

<p><img src="/img/cloudpatterns/anti-corruption-layer.png" alt="Anti-Corruption Layer" title="Anti-Corruption Layer" /></p>

<p>Un saludo.</p>
:ET