I"Õ<p>El objetivo del patr√≥n <strong>Factory</strong> es proveer de un m√©todo abstracto de creaci√≥n de un objeto delegando en las subclases concretas su creaci√≥n concreta.</p>

<p>Lo que para los mortales como yo, esto significa que definiremos una clase base donde los m√©todos puedan ser sobrecargados con la implementaci√≥n espec√≠fica de cada clase que herede la clase base. ¬øno?</p>

<p>Vale, m√°s f√°cil todav√≠a, tendremos unas clases con unos m√©todos abstractos que cuando sean heredados en cada subclase (clase hija que hereda la clase Factory) solo tendremos el nombre, las entradas y las salidas comunes a todas estas clases.</p>

<p>Posteriormente, en cada clase hija. Deberemos implementar estos m√©todos con el comportamiento de cada una de las clases.</p>

<p>¬øVamos con el ejemplo? ¬°¬°Vamos!!.</p>

<p>Volviendo a nuestro ejemplo de venta de libros, nos centraremos en la parte de los pedidos que pueden hacer los clientes.</p>

<p>La clase Cliente tiene un m√©todo que es CrearPedido, este pedido tiene dos formas de pago una en efectivo y otro de targeta.</p>

<p>As√≠, de esta premisa, nos encontramos con dos clases ClienteEfectivo y ClienteTargeta. Donde la implementaci√≥n del patr√≥n quedar√≠a de la siguiente manera:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Pedido</span> <span class="p">{</span>
    <span class="k">protected</span> <span class="kt">double</span> <span class="n">_importe</span><span class="p">;</span>

    <span class="k">protected</span> <span class="nf">Pedido</span><span class="p">(</span><span class="kt">double</span> <span class="n">importe</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_importe</span> <span class="p">=</span> <span class="n">importe</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="kt">bool</span> <span class="nf">Valida</span><span class="p">();</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">Paga</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">PedidoEfectivo</span> <span class="p">:</span> <span class="n">Pedido</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">PedidoEfectivo</span><span class="p">(</span><span class="kt">double</span> <span class="n">importe</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">importe</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Paga</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"M√©todo de Pago Efectivo, importe: </span><span class="p">{</span> <span class="n">_importe</span> <span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Valida</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="n">PedidoTargeta</span> <span class="p">:</span> <span class="n">Pedido</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">PedidoTargeta</span><span class="p">(</span><span class="kt">double</span> <span class="n">importe</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">importe</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Paga</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"M√©todo de Pago Targeta, importe: </span><span class="p">{</span><span class="n">_importe</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Valida</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">_importe</span> <span class="p">&gt;=</span> <span class="m">0.0</span> <span class="p">&amp;&amp;</span> <span class="n">_importe</span> <span class="p">&lt;=</span> <span class="m">500.0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Como vemos los m√©todos valida en el caso del pago en efectivo no contiene ninguna l√≥gica de negocio, sin embargo, en el pago con tarjeta, este tiene una restricci√≥n de que el importe debe ser mayor e igual que 0 y menor e igual que 500.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">FactoryMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">PedidoTargeta</span> <span class="n">pedidoEfectivo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PedidoTargeta</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pedidoEfectivo</span><span class="p">.</span><span class="nf">Valida</span><span class="p">())</span> <span class="p">{</span> <span class="n">pedidoEfectivo</span><span class="p">.</span><span class="nf">Paga</span><span class="p">();}</span>

        <span class="n">PedidoTargeta</span> <span class="n">pedidoTargetaNoValido</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PedidoTargeta</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pedidoTargetaNoValido</span><span class="p">.</span><span class="nf">Valida</span><span class="p">())</span> <span class="p">{</span> <span class="n">pedidoTargetaNoValido</span><span class="p">.</span><span class="nf">Paga</span><span class="p">();</span> <span class="p">}</span>

        <span class="n">PedidoTargeta</span> <span class="n">pedidoTargetaValido</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PedidoTargeta</span><span class="p">(</span><span class="m">50</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pedidoTargetaValido</span><span class="p">.</span><span class="nf">Valida</span><span class="p">())</span> <span class="p">{</span> <span class="n">pedidoTargetaValido</span><span class="p">.</span><span class="nf">Paga</span><span class="p">();</span> <span class="p">}</span>
    <span class="p">}</span>    
</code></pre></div></div>
:ET