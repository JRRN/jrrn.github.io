I"À<p>El patr√≥n Event Sourcing nos ayuda con el dise√±o y la implementaci√≥n de nuestra aplicaci√≥n. Es un patr√≥n que se basa en almacenar todos lo cambios realizados sobre una entidad de dominio.</p>

<p>Este patr√≥n nos ayuda a saber porque estados a pasado una entidad y en caso de producirse un fallo irrecuperable, poder reprocesar los estados almacenados dejando la estructura de datos de nuevo con el √∫ltimo estado que ten√≠a (mantener la coherencia de datos) o realizar modificaciones manuales para compensar alg√∫n error, a trav√©s de un evento.</p>

<p>Este patr√≥n nos ayuda a mitigar los problemas de las arquitecturas CRUD con muchas peticiones concurrentes.</p>

<p>Imaginemos que tenemos 2 usuarios (A, B) que van a interactuar con una misma entidad, y que por cosas del espacio-tiempo las dos transacciones llegan al mismo tiempo a la base de datos para modificar esta entidad. Podr√≠a ser, que por mala fortuna, la petici√≥n B que deber√≠a procesarse posterior a la de A, modifique la entidad y que seguidamente A la volviera a modificar. En este caso obtendr√≠amos una inconsistencia de datos en esa entidad, con lo que la veracidad de la informaci√≥n quedar√≠a anulada.</p>

<p>Con event sourcing, podemos solventar este problema, ya que los eventos de A y B tienen una marca de tiempo, con lo que nos permite procesar estos eventos cronol√≥gicamente como sucede con los <a href="https://es.wikipedia.org/wiki/Tiempos_l√≥gicos_de_Lamport" title="Relojes de Lamport">Relojes de Lamport</a>.</p>

<p>Los principales beneficios de Event Sourcing son:</p>

<ul>
  <li>
    <p>Almacenamos todos los eventos que hacen mutar una entidad.</p>
  </li>
  <li>
    <p>Como la emisi√≥n y el procesamiento de los eventos van por separado, nos permite mejor rendimiento y escalabilidad.</p>
  </li>
  <li>
    <p>Tenemos una trazabilidad para verificar, modificar o eliminar cambios en una entidad y sabemos quien y cuando se ha desencadenado este evento.</p>
  </li>
  <li>
    <p>Mejoramos la consistencias de datos ya que no se producen modificaciones simultaneas sin controlar el orden en nuestra base de datos.</p>
  </li>
  <li>
    <p>Casa muy bien con el patr√≥n CQRS.</p>
  </li>
</ul>

<p>Veamos el gr√°fico de la infraestructura:</p>

:ET