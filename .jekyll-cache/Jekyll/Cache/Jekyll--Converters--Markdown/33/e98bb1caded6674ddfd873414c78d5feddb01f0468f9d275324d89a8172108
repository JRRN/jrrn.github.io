I"ˆ+<p>Hola! Hoy vengo a presentaros una POC en la que llevo un tiempo trabajando.</p>

<p>Me picaba la curiosidad jugar un poco con Machine Learning y ver que nos pod√≠a ofrecer. Despu√©s de leer y situarme un poco sobre el tema, coincidi√≥ que Microsoft, hab√≠a implementado un nuevo Framework de integraci√≥n para machine learning (<a href="https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet">ML.Net</a>).</p>

<p>Y la verdad, que es m√°s sencillo de lo que parece.</p>

<p>En esta POC hemos jugado con una aplicaci√≥n UWP (Universal Windows Platform), la idea era picar e integrar la aplicaci√≥n con Rasperry Pi 3, en ello estamos pero el hardware es una pasta‚Ä¶</p>

<p>Lo primero de todo, decir que no he entrenado el modelo. Simplemente en el repositorio de <a href="https://github.com/onnx/models">ONNX</a>, ten√©is modelos entrenados para hacer vuestros primeros pinitos y posteriormente ya veremos como entrenar un modelo, porque para ello, depende como, se necesita m√°quina, bastante m√°quina, aunque he encontrado una alternativa que parece viable <a href="https://www.customvision.ai/">CustomVision</a>, sigo pensando que entrenar un modelo al 100% para lo que tu quieras no deber√≠a ser con alternativas c√≥mo esta.</p>

<p>Primero definimos la vista XAML con una Grid, control:CameraPreview (Nuget Microsoft.Toolkit.Uwp.UI.Controls;
), un textblock y un canvas (para renderizar el resultado de lo que va detectando):</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">&lt;</span><span class="n">Grid</span> <span class="n">Background</span><span class="p">=</span><span class="s">"BlueViolet"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">controls</span><span class="p">:</span><span class="n">CameraPreview</span> <span class="n">x</span><span class="p">:</span><span class="n">Name</span><span class="p">=</span><span class="s">"CameraPreview"</span> 
                                <span class="n">Width</span><span class="p">=</span><span class="s">"500"</span> <span class="n">Height</span><span class="p">=</span><span class="s">"300"</span> 
                                <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Left"</span> 
                                <span class="n">VerticalAlignment</span><span class="p">=</span><span class="s">"Top"</span><span class="p">&gt;&lt;/</span><span class="n">controls</span><span class="p">:</span><span class="n">CameraPreview</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">Canvas</span> <span class="n">Name</span><span class="p">=</span><span class="s">"YoloCanvas"</span> <span class="n">Width</span><span class="p">=</span><span class="s">"500"</span> <span class="n">Height</span><span class="p">=</span><span class="s">"300"</span>
                <span class="n">Grid</span><span class="p">.</span><span class="n">Row</span><span class="p">=</span><span class="s">"0"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Left"</span> 
                <span class="n">VerticalAlignment</span><span class="p">=</span><span class="s">"Top"</span><span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Width</span><span class="p">=</span><span class="s">"500"</span> <span class="n">Height</span><span class="p">=</span><span class="s">"300"</span> 
                   <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Right"</span> 
                   <span class="n">VerticalAlignment</span><span class="p">=</span><span class="s">"Top"</span>
                   <span class="n">x</span><span class="p">:</span><span class="n">Name</span><span class="p">=</span><span class="s">"TextBlockInformation"</span> <span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>En la clase MainPage definimos el evento para capturar las im√°genes de la c√°mara:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">OnNavigatedTo</span><span class="p">(</span><span class="n">NavigationEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_model</span> <span class="p">=</span> <span class="k">await</span> <span class="n">LearningModelYolo</span><span class="p">.</span><span class="nf">CreateFromStreamAsync</span><span class="p">();</span>
    <span class="n">_cameraModel</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CameraModel</span><span class="p">().</span><span class="nf">GetCameraSize</span><span class="p">(</span><span class="n">CameraPreview</span><span class="p">);</span>
    <span class="k">await</span> <span class="n">CameraPreview</span><span class="p">.</span><span class="nf">StartAsync</span><span class="p">();</span>
    <span class="n">CameraPreview</span><span class="p">.</span><span class="n">CameraHelper</span><span class="p">.</span><span class="n">FrameArrived</span> <span class="p">+=</span> <span class="n">CameraHelper_FrameArrived</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Y a partir de aqu√≠, ya podemos empezar a procesar los frames de la c√°mara para su an√°lisis:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">async</span> <span class="k">void</span> <span class="nf">CameraHelper_FrameArrived</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">Toolkit</span><span class="p">.</span><span class="n">Uwp</span><span class="p">.</span><span class="n">Helpers</span><span class="p">.</span><span class="n">FrameEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">?.</span><span class="n">VideoFrame</span><span class="p">?.</span><span class="n">SoftwareBitmap</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">_stopwatch</span> <span class="p">=</span> <span class="n">Stopwatch</span><span class="p">.</span><span class="nf">StartNew</span><span class="p">();</span>
    <span class="n">ImageFeatureValue</span> <span class="n">_image</span> <span class="p">=</span> <span class="n">ImageFeatureValue</span><span class="p">.</span><span class="nf">CreateFromVideoFrame</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">VideoFrame</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">input</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Yolov2Input</span>
    <span class="p">{</span>
        <span class="n">image</span> <span class="p">=</span> <span class="n">_image</span>
    <span class="p">};</span>

    <span class="kt">var</span> <span class="n">output</span> <span class="p">=</span> <span class="n">_model</span><span class="p">.</span><span class="nf">EvaluateAsync</span><span class="p">(</span><span class="n">input</span><span class="p">).</span><span class="nf">GetAwaiter</span><span class="p">().</span><span class="nf">GetResult</span><span class="p">();</span>
    <span class="n">_stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>

    <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">vectorImage</span> <span class="p">=</span> <span class="n">output</span><span class="p">.</span><span class="n">grid</span><span class="p">.</span><span class="nf">GetAsVectorView</span><span class="p">();</span>
    <span class="n">IList</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">imageList</span> <span class="p">=</span> <span class="n">vectorImage</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
    <span class="n">_boxes</span> <span class="p">=</span> <span class="n">_parser</span><span class="p">.</span><span class="nf">ParseOutputs</span><span class="p">(</span><span class="n">vectorImage</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>

    <span class="kt">var</span> <span class="n">maxIndex</span> <span class="p">=</span> <span class="n">imageList</span><span class="p">.</span><span class="nf">IndexOf</span><span class="p">(</span><span class="n">imageList</span><span class="p">.</span><span class="nf">Max</span><span class="p">());</span>

    <span class="k">await</span> <span class="n">Dispatcher</span><span class="p">.</span><span class="nf">RunAsync</span><span class="p">(</span><span class="n">CoreDispatcherPriority</span><span class="p">.</span><span class="n">Normal</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">TextBlockInformation</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">$"</span><span class="p">{</span><span class="m">1000f</span> <span class="p">/</span> <span class="n">_stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">,</span><span class="m">4</span><span class="p">:</span><span class="n">f1</span><span class="p">}</span><span class="s"> fps on Width </span><span class="p">{</span><span class="n">_cameraModel</span><span class="p">.</span><span class="n">Width</span><span class="p">}</span><span class="s"> x Height </span><span class="p">{</span><span class="n">_cameraModel</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
        <span class="nf">DrawOverlays</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">VideoFrame</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Decir que si instalamos el framework, ML.Net al importar el modelo ONNX, nos genera la clase para poder acceder a √©l autom√°ticamente.</p>

<p>Por √∫ltimo, lo que m√°s me ha costado ha sido situar el canvas y situarlo m√°s o menos en el punto que reconoce algo en el frame que le pasamos.</p>

<p>De momento, es todo lo que he conseguido. Ahora lo siguiente, es entrenar mi propio modelo para que identifique personas.</p>

<p>Os seguir√© contando los avances.</p>

<p>Os dejo el <a href="https://github.com/JRRN/Pabi">c√≥digo</a> (Se adminten PR‚Äôs)</p>

<p>Un saludo y hasta la pr√≥xima.</p>
:ET