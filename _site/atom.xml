<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>JRRN Coding! | A simple Jekyll blog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <id>http://localhost:4000</id>
 <updated>2017-11-16T19:40:38+01:00</updated>
 <author>
   <name>JRRN</name>
   <uri>https://jrrn.github.io</uri>
   <email></email>
 </author>

 

 <entry>
   <title>Un poquito de Git</title>
   <link href="http://localhost:4000/un-poquito-de-git"/>
   <id>http://localhost:4000/un-poquito-de-git</id>
   <updated>2017-11-14T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;Hola, hoy quiero traeros una recopilación de comandos relacionados con la función que realizan sobre un repositorio Git.&lt;/p&gt; &lt;p&gt;Con esta chuleta podremos recordar facilmente que comandos deberíamos usar en cada caso en nuestra lucha con los repositorios.&lt;/p&gt; &lt;table class=&quot;table table-striped&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;row-1 odd&quot;&gt; &lt;th class=&quot;column-1&quot;&gt;Función&lt;/th&gt; &lt;th class=&quot;column-2&quot;&gt;Comando&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;...</content>
 </entry>

 

 <entry>
   <title>Patrón Adapter</title>
   <link href="http://localhost:4000/patron-adapter"/>
   <id>http://localhost:4000/patron-adapter</id>
   <updated>2017-11-14T00:00:00+01:00</updated>
   <content type="html">
</content>
 </entry>

 

 <entry>
   <title>Patrones de Estructura</title>
   <link href="http://localhost:4000/patrones-de-estructura"/>
   <id>http://localhost:4000/patrones-de-estructura</id>
   <updated>2017-11-13T00:00:00+01:00</updated>
   <content type="html">&lt;h3 id=&quot;patrones-de-estructura&quot;&gt;Patrones de estructura&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Patrón Adapter&lt;/li&gt;
  &lt;li&gt;Patrón Bridge&lt;/li&gt;
  &lt;li&gt;Patrón Composite&lt;/li&gt;
  &lt;li&gt;Patrón Decorator&lt;/li&gt;
  &lt;li&gt;Patrón Facade&lt;/li&gt;
  &lt;li&gt;Patrón Flyweight&lt;/li&gt;
  &lt;li&gt;Patrón Proxy&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>

 

 <entry>
   <title>Move me To Azure</title>
   <link href="http://localhost:4000/move-me-to-azure"/>
   <id>http://localhost:4000/move-me-to-azure</id>
   <updated>2017-11-12T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;Hola de nuevo, cambiando un poco la temática que llevo siguiendo sobre patrones, me gustaría escribir algo que he descubierto y que es una píldora, fácil y rápida.&lt;/p&gt; &lt;p&gt;En &lt;a href=&quot;https://www.plainconcepts.com&quot; title=&quot;Plain Concepts&quot;&gt;Plain&lt;/a&gt; he estado trabajando en la integración con una herramienta &lt;em&gt;third party&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Es una aplicación que se auto...</content>
 </entry>

 

 <entry>
   <title>Patrón Singleton</title>
   <link href="http://localhost:4000/patron-singleton"/>
   <id>http://localhost:4000/patron-singleton</id>
   <updated>2017-11-10T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El patrón singleton tiene como objetivo asegurar que una clase sólo posee una instancia y proporciona un método de clase único que devuelve la instancia.&lt;/p&gt; &lt;p&gt;Es un patrón simple y conocido. Si queremos que solo haya una instancia de un objeto y no se puedan generar más mientras haya una...</content>
 </entry>

 

 <entry>
   <title>Patrón Prototype</title>
   <link href="http://localhost:4000/patron-prototype"/>
   <id>http://localhost:4000/patron-prototype</id>
   <updated>2017-11-09T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El objetivo de este patrón es la creación de nuevos objetos mediante la duplicación de objetos existentes llamados prototipos que disponen de la capacidad de clonación.&lt;/p&gt; &lt;p&gt;En resumen, y simplificando, crear nuevos objetos a partir de un objeto existente sin modificar una clase siempre que se añada un nuevo objeto.&lt;/p&gt;...</content>
 </entry>

 

 <entry>
   <title>Patrón Factory Method</title>
   <link href="http://localhost:4000/patron-factory-method"/>
   <id>http://localhost:4000/patron-factory-method</id>
   <updated>2017-11-08T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El objetivo del patrón Factory es proveer de un método abstracto de creación de un objeto delegando en las subclases concretas su creación concreta.&lt;/p&gt; &lt;p&gt;Lo que para los mortales como yo, esto significa que definiremos una clase base donde los métodos puedan ser sobrecargados con la implementación específica de cada...</content>
 </entry>

 

 <entry>
   <title>Patrón Builder</title>
   <link href="http://localhost:4000/patron-builder"/>
   <id>http://localhost:4000/patron-builder</id>
   <updated>2017-11-07T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El objetivo del patrón &lt;strong&gt;Builder&lt;/strong&gt; es abstraer la construcción de objetos complejos de su implementación de modo que un cliente pueda crear objetos complejos sin tener que preocuparse de las diferencias en su implantación.&lt;/p&gt; &lt;p&gt;Volviendo a nuestro ejemplo de los libros y revistas. Durante la compra de libros/revistas se generan...</content>
 </entry>

 

 <entry>
   <title>Patrón Abstract Factory</title>
   <link href="http://localhost:4000/patron-abstract-factory"/>
   <id>http://localhost:4000/patron-abstract-factory</id>
   <updated>2017-11-06T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El patrón &lt;strong&gt;Abstract Factory&lt;/strong&gt; proporciona una interfaz para crear familias de objetos relacionados o que dependen entre sí, sin especificar sus clases concretas.&lt;/p&gt; &lt;p&gt;Esto quiere decir, que por poner un ejemplo, podríamos crear objetos de tipo Books sin tener que definir los tipos de books explícitamente. ¿Mejor con un ejemplo,...</content>
 </entry>

 

 <entry>
   <title>Patrones de Construcción</title>
   <link href="http://localhost:4000/patrones-de-construccion"/>
   <id>http://localhost:4000/patrones-de-construccion</id>
   <updated>2017-11-05T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;Los patrones de construcción tienen como misión abstraer los mecanimos de creación de objetos, volviendose independiente de la forma en que se crean los objetos y los mecanismos de instanciación de las clases concretas.&lt;/p&gt; &lt;p&gt;Estos patrones encapsulan el uso de clases concretas y favorecen el uso de interfaces en las...</content>
 </entry>

 

</feed>