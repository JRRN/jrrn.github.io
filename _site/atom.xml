<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>JRRN Coding! | A simple Jekyll blog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <id>http://localhost:4000</id>
 <updated>2018-10-30T21:52:37+01:00</updated>
 <author>
   <name>JRRN</name>
   <uri>https://jrrn.github.io</uri>
   <email></email>
 </author>

 

 <entry>
   <title>Principios SOLID</title>
   <link href="http://localhost:4000/solid"/>
   <id>http://localhost:4000/solid</id>
   <updated>2018-10-25T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;Hola hoy vengo con los principios SOLID. Aunque es un tema que conozco, el pasado sábado asistí a la &lt;a href=&quot;http://netconfbcn2018.azurewebsites.net/&quot;&gt;NET. Conf 2018&lt;/a&gt; y varias personas no tenían conocimiento sobre ellos y eso no se puede quedar así.&lt;/p&gt; &lt;p&gt;Los presentamos:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsability&lt;/li&gt; &lt;li&gt;&lt;strong&gt;O&lt;/strong&gt;pen Closed&lt;/li&gt; &lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;iskow&lt;/li&gt; &lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;nterface Segregation&lt;/li&gt; &lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;ependency Injection&lt;/li&gt;...</content>
 </entry>

 

 <entry>
   <title>Patrón Visitor</title>
   <link href="http://localhost:4000/patron-visitor"/>
   <id>http://localhost:4000/patron-visitor</id>
   <updated>2018-08-19T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón Visitor nos permite agregar operaciones a objetos sin tener que modificar la clase concreta de estos objetos. Su uso se recomienda para pequeñas y pocas funcionalidades extra.&lt;/p&gt; &lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inteface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitante&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Visita&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditorialSinFilial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editorialSinFilial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;...</content>
 </entry>

 

 <entry>
   <title>Patrón Template Method</title>
   <link href="http://localhost:4000/patron-template-method"/>
   <id>http://localhost:4000/patron-template-method</id>
   <updated>2018-08-18T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón Template Method nos permite definir un esqueleto de métodos abstractos en los que cada clase concreta sobrecargará estos métodos para definir su comportamiento específico y cuya implementación difiera en algunos pasos.&lt;/p&gt; &lt;p&gt;De esta forma, definimos una clase con métodos abstractos como si fuera un contrato o interfaz, y...</content>
 </entry>

 

 <entry>
   <title>Patrón State</title>
   <link href="http://localhost:4000/patron-state"/>
   <id>http://localhost:4000/patron-state</id>
   <updated>2018-08-17T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón State nos ayuda a que un objeto se comporte de forma diferente según un flag de estado. De esta forma, según cual sea el flag de estado, el objeto se comportará de una forma o de otra.&lt;/p&gt; &lt;p&gt;El ejemplo más simple para entender este patrón, es en los...</content>
 </entry>

 

 <entry>
   <title>Patrón Strategy</title>
   <link href="http://localhost:4000/patron-strategy"/>
   <id>http://localhost:4000/patron-strategy</id>
   <updated>2018-08-16T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón Strategy nos permite definir varios algoritmos para aplicar sobre un objeto según nos convenga. De esta forma, podemos definir posibles acciones sobre las que decidiremos cual es la más correcta para aplicar según ciertas variables.&lt;/p&gt; &lt;p&gt;Aunque es un patrón bastante sencillo… Lo que realmente hace es definir algoritmos...</content>
 </entry>

 

 <entry>
   <title>Patrón Observer</title>
   <link href="http://localhost:4000/patron-observer"/>
   <id>http://localhost:4000/patron-observer</id>
   <updated>2018-08-15T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón Observer se usa para crear una dependencia entre el objeto y otros que estén anexados a él. De esta forma, cuando se realiza una modificación en el primer objeto, los objetos anexados a el, reciben esta actualización.&lt;/p&gt; &lt;p&gt;Aunque es clara la definición, lo que se trata es de...</content>
 </entry>

 

 <entry>
   <title>Patrón Specification</title>
   <link href="http://localhost:4000/patron-specification"/>
   <id>http://localhost:4000/patron-specification</id>
   <updated>2018-07-31T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón Specification es un patrón orientando a las aplicaciones con dominio. Es un patrón muy útil para validar queries y orientado a encapsular los objetos que pueden usarse en estas queries.&lt;/p&gt; &lt;p&gt;Es un patrón que separa la responsabilidad entre los objetos a recuperar y como los obtenemos.&lt;/p&gt; &lt;p&gt;Vamos con...</content>
 </entry>

 

 <entry>
   <title>Patrón Memento</title>
   <link href="http://localhost:4000/patron-memento"/>
   <id>http://localhost:4000/patron-memento</id>
   <updated>2018-07-25T00:00:00+02:00</updated>
   <content type="html">&lt;p&gt;El patrón memento previene en la encapsulación de un objeto el estado en que se encuentra en cada momento. De esta forma, si por algún motivo, necesitamos hacer un rollback de estos cambios del objeto, podamos restaurar sin romper nada.&lt;/p&gt; &lt;p&gt;Es como tener un pila de estados de como ha...</content>
 </entry>

 

 <entry>
   <title>Patrón Mediator</title>
   <link href="http://localhost:4000/patron-mediator"/>
   <id>http://localhost:4000/patron-mediator</id>
   <updated>2018-03-04T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;El patrón &lt;strong&gt;Mediator&lt;/strong&gt; nos ayuda a gestionar y controlar las interacciones entre un conjunto de objetos sin que deban conocerse entre ellos.&lt;/p&gt; &lt;p&gt;Para los mortales, se define un objeto que tiene las reglas de interacción entre los objetos que se van a comunicar.&lt;/p&gt; &lt;p&gt;¿Todavía no? Veámoslo con un ejemplo:&lt;/p&gt; &lt;p&gt;Esta...</content>
 </entry>

 

 <entry>
   <title>Sin retornos NULL con Maybe<T></title>
   <link href="http://localhost:4000/maybe"/>
   <id>http://localhost:4000/maybe</id>
   <updated>2018-02-25T00:00:00+01:00</updated>
   <content type="html">&lt;p&gt;Maybe es una estructura(Monad) que nos ayuda a no tener que trabajar con objetos NULL.&lt;/p&gt; &lt;p&gt;De esta forma, el objeto, hereda una propiedad HasValue para determinar si es NULO o no, ahorrándonos el típico if (a != null) que tan feo queda en nuestro código.&lt;/p&gt; &lt;p&gt;Así la estructura quedaría de...</content>
 </entry>

 

</feed>